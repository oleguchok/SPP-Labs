//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RssNewsReader.FeedServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FeedServiceReference.IFeedService")]
    public interface IFeedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedService/GetFeed", ReplyAction="http://tempuri.org/IFeedService/GetFeedResponse")]
        System.ServiceModel.Syndication.Rss20FeedFormatter GetFeed(string feedUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedService/GetFeed", ReplyAction="http://tempuri.org/IFeedService/GetFeedResponse")]
        System.Threading.Tasks.Task<System.ServiceModel.Syndication.Rss20FeedFormatter> GetFeedAsync(string feedUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedService/FilterFeed", ReplyAction="http://tempuri.org/IFeedService/FilterFeedResponse")]
        System.ServiceModel.Syndication.Rss20FeedFormatter FilterFeed(System.ServiceModel.Syndication.Rss20FeedFormatter formatterFeed, string[] tags);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFeedService/FilterFeed", ReplyAction="http://tempuri.org/IFeedService/FilterFeedResponse")]
        System.Threading.Tasks.Task<System.ServiceModel.Syndication.Rss20FeedFormatter> FilterFeedAsync(System.ServiceModel.Syndication.Rss20FeedFormatter formatterFeed, string[] tags);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFeedServiceChannel : RssNewsReader.FeedServiceReference.IFeedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FeedServiceClient : System.ServiceModel.ClientBase<RssNewsReader.FeedServiceReference.IFeedService>, RssNewsReader.FeedServiceReference.IFeedService {
        
        public FeedServiceClient() {
        }
        
        public FeedServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FeedServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FeedServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FeedServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.ServiceModel.Syndication.Rss20FeedFormatter GetFeed(string feedUrl) {
            return base.Channel.GetFeed(feedUrl);
        }
        
        public System.Threading.Tasks.Task<System.ServiceModel.Syndication.Rss20FeedFormatter> GetFeedAsync(string feedUrl) {
            return base.Channel.GetFeedAsync(feedUrl);
        }
        
        public System.ServiceModel.Syndication.Rss20FeedFormatter FilterFeed(System.ServiceModel.Syndication.Rss20FeedFormatter formatterFeed, string[] tags) {
            return base.Channel.FilterFeed(formatterFeed, tags);
        }
        
        public System.Threading.Tasks.Task<System.ServiceModel.Syndication.Rss20FeedFormatter> FilterFeedAsync(System.ServiceModel.Syndication.Rss20FeedFormatter formatterFeed, string[] tags) {
            return base.Channel.FilterFeedAsync(formatterFeed, tags);
        }
    }
}
